import java.util.Arrays;

public class SortingAlgorithms {

    public static void BubbleSort(double[] array){
        for (int i = 0 ; i< array.length -1 ; i++){
            for ( int j = 0 ; j < array.length - i -  1; j++)  {
                if ( array[j] > array[j-1]){
                    double t = array[j];
                    array[j] = array[j+1];
                    array[j+1] = t;
                }
            }
        }
    }
    //O(n^2)



    public static void SelectionSort(double[] array){
        for(int i = 0 ; i  < array.length -1 ; i++){
            if(array[i] > array[i + 1]){
                if ( array[i] > array[i-1]){
                    double t = array[i];
                    array[i] = array[i+1];
                    array[i+1] = t;
                }
            }
        }

    }
    //O(n^2)


    public static void InsertionSort(double[] array){
        for(int i = 1 ; i< array.length ; i++){     
            double key = array[i];               
            int j = i;
            while(j > 0 && key < array[j-1]){
                array[j] = array[j-1]; 
                j--;
            }
            array[j] = key; 
        }

    }
    //O(n^2)



    public static void Merge(double first_array[], double[] second_array, double[] final_array){
        int i = 0;
        int j = 0;

        while(i + j < final_array.length){
            if (j == second_array.length || (i< first_array.length && first_array[i] > second_array[j])){
                final_array[i+j] = first_array[i++];
            }
            else{
      
                final_array[i+j] = second_array[j++];
            }
        }
    }

    public static void MergeSort(double[] array){
        if ( array.length < 2 )
            return;
        int middle = array.length / 2 ;

        double[] left_subarray = Arrays.copyOfRange(array, 0, middle);
        double[] right_subarray = Arrays.copyOfRange(array, middle , array.length);

        MergeSort(left_subarray);
        MergeSort(right_subarray);

        Merge(left_subarray,right_subarray,array);
    }


    public static int partition(double[] array, int low, int high){
        double pivot = array[high];
        int i = (low - 1 );
        
        //divide et impera

        for (int j = low ; j < high; j ++){
            if ( array[j] <= pivot){
                i++;
                double t = array[i];
                array[i] = array[j];
                array[j] = t;
            }
        }
        double t = array[i + 1];
        array[i + 1] = array[high];
        array[high] = t;
        return i+1;
    }


    public static void QuickSort(double[] array, int low , int high){
        if( low < high) {
            int pi = partition(array, low, high);

            QuickSort(array, low, pi - 1);
            QuickSort(array, pi + 1, high);
        }
    }


}
